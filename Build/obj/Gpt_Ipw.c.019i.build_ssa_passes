Gpt_Ipw_DisableInterrupt (const struct Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
  <bb 2> :
  _1 = pHwChannelConfig->instanceType;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:

  <bb 5> :

  <bb 6> :
<L3>:
  return;

}


Gpt_Ipw_DeInit (const struct Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
  <bb 2> :
  _1 = pHwChannelConfig->instanceType;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  _2 = pHwChannelConfig->instance;
  Ftm_Gpt_Ip_Deinit (_2);
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:

  <bb 5> :

  <bb 6> :
<L3>:
  return;

}


Gpt_Ipw_EnableInterrupt (const struct Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
  <bb 2> :
  _1 = pHwChannelConfig->instanceType;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:

  <bb 5> :

  <bb 6> :
<L3>:
  return;

}


Gpt_Ipw_StopTimer (const struct Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
  <bb 2> :
  _1 = pHwChannelConfig->instanceType;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  _2 = pHwChannelConfig->instance;
  _3 = pHwChannelConfig->channel;
  Ftm_Gpt_Ip_DisableChannelInterrupt (_2, _3);
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:

  <bb 5> :

  <bb 6> :
<L3>:
  return;

}


Gpt_Ipw_GetTimeElapsed (const struct Gpt_Ipw_HwChannelConfigType * pHwChannelConfig, struct Gpt_HwChannelInfoType * pReturnHwChannelInfo)
{
  uint32 returnValue;
  Gpt_ValueType D.6044;

  <bb 2> :
  _1 = pHwChannelConfig->instanceType;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  returnValue = Gpt_Ipw_FtmGetTimeElapsed (pHwChannelConfig, pReturnHwChannelInfo);
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:
  returnValue = 0;

  <bb 5> :
  D.6044 = returnValue;

  <bb 6> :
<L3>:
  return D.6044;

}


Gpt_Ipw_StartTimer (const struct Gpt_Ipw_HwChannelConfigType * pHwChannelConfig, Gpt_ValueType uValue)
{
  Std_ReturnType returnValue;
  Std_ReturnType D.6042;

  <bb 2> :
  returnValue = 1;
  _1 = pHwChannelConfig->instanceType;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  _2 = pHwChannelConfig->instance;
  _3 = pHwChannelConfig->channel;
  _4 = (short unsigned int) uValue;
  Ftm_Gpt_Ip_StartCounting (_2, _3, _4);
  returnValue = 0;
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:

  <bb 5> :
  D.6042 = returnValue;

  <bb 6> :
<L3>:
  return D.6042;

}


Gpt_Ipw_Init (const struct Gpt_Ipw_HwChannelConfigType * pHwChannelConfig)
{
  <bb 2> :
  _1 = pHwChannelConfig->instanceType;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  _2 = pHwChannelConfig->instance;
  _3 = pHwChannelConfig->Gpt_Ipw_ChannelConfig.Ftm_Gpt_Ip_ChannelConfig;
  Ftm_Gpt_Ip_InitChannel (_2, _3);
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:

  <bb 5> :

  <bb 6> :
<L3>:
  return;

}


Gpt_Ipw_InitInstances (const struct Gpt_ConfigType * configPtr)
{
  uint8 index;

  <bb 2> :
  index = 0;
  index = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  _1 = configPtr->Gpt_Ipw_HwInstanceConfig;
  _2 = (int) index;
  _3 = (*_1)[_2].instanceType;
  if (_3 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
<L1>:
  _4 = configPtr->Gpt_Ipw_HwInstanceConfig;
  _5 = (int) index;
  _6 = (*_4)[_5].instance;
  _7 = configPtr->Gpt_Ipw_HwInstanceConfig;
  _8 = (int) index;
  _9 = (*_7)[_8].Gpt_Ipw_InstanceConfig.Ftm_Gpt_Ip_InstanceConfig;
  Ftm_Gpt_Ip_Init (_6, _9);
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:

  <bb 6> :
  index.0_10 = index;
  index = index.0_10 + 1;

  <bb 7> :
  _11 = configPtr->instanceCount;
  if (index < _11)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :

  <bb 9> :
<L6>:
  return;

}


Gpt_Ipw_FtmGetTimeElapsed (const struct Gpt_Ipw_HwChannelConfigType * pHwChannelConfig, struct Gpt_HwChannelInfoType * pReturnHwChannelInfo)
{
  uint32 compareValue;
  uint32 counterValue;
  boolean HasChEvOccurred;
  Gpt_ValueType returnValue;
  Gpt_ValueType D.6032;

  <bb 2> :
  _1 = pHwChannelConfig->instance;
  counterValue = Ftm_Gpt_Ip_GetCntValue (_1);
  _2 = pHwChannelConfig->instance;
  _3 = pHwChannelConfig->channel;
  compareValue = Ftm_Gpt_Ip_GetCompareValue (_2, _3);
  _4 = pHwChannelConfig->instance;
  _5 = (int) _4;
  _6 = pHwChannelConfig->channel;
  _7 = (int) _6;
  _8 = Ftm_Gpt_Ip_u32TargetValue[_5][_7];
  pReturnHwChannelInfo->uTargetTime = _8;
  if (counterValue > compareValue)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _9 = compareValue - counterValue;
  _10 = _9 + 65535;
  _11 = pReturnHwChannelInfo->uTargetTime;
  if (_10 <= _11)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _12 = pReturnHwChannelInfo->uTargetTime;
  _13 = counterValue - compareValue;
  _14 = _12 + _13;
  returnValue = _14 + 4294901762;
  goto <bb 7>; [INV]

  <bb 5> :
  returnValue = pReturnHwChannelInfo->uTargetTime;
  goto <bb 7>; [INV]

  <bb 6> :
  _15 = pReturnHwChannelInfo->uTargetTime;
  _16 = counterValue - compareValue;
  returnValue = _15 + _16;

  <bb 7> :
  _17 = pHwChannelConfig->instance;
  _18 = pHwChannelConfig->channel;
  HasChEvOccurred = Ftm_Gpt_Ip_GetChInterruptStatusFlag (_17, _18);
  if (HasChEvOccurred != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  pReturnHwChannelInfo->bChannelRollover = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  pReturnHwChannelInfo->bChannelRollover = 0;

  <bb 10> :
  D.6032 = returnValue;

  <bb 11> :
<L9>:
  return D.6032;

}


Ftm_Gpt_Ip_GetCompareValue (uint8 instance, uint8 channel)
{
  uint32 D.6036;

  <bb 2> :
  _1 = (int) instance;
  _2 = ftmGptBase[_1];
  _3 = (int) channel;
  D.6036 = _2->CONTROLS[_3].CV;

  <bb 3> :
<L0>:
  return D.6036;

}


Ftm_Gpt_Ip_GetCntValue (uint8 instance)
{
  uint32 D.6034;

  <bb 2> :
  _1 = (int) instance;
  _2 = ftmGptBase[_1];
  D.6034 = _2->CNT;

  <bb 3> :
<L0>:
  return D.6034;

}


Ftm_Gpt_Ip_GetChInterruptStatusFlag (uint8 instance, uint8 channel)
{
  boolean D.6038;

  <bb 2> :
  _1 = (int) instance;
  _2 = ftmGptBase[_1];
  _3 = (int) channel;
  _4 = _2->CONTROLS[_3].CSC;
  _5 = _4 & 128;
  D.6038 = _5 != 0;

  <bb 3> :
<L0>:
  return D.6038;

}


